/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "math.h"
#include <stdio.h>
#include <stdlib.h>
#include <ctime>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

ADC_HandleTypeDef hadc1;
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

const int16_t ADC_SIZE = 15000; // array size for data from ADC
const int16_t UART_SIZE = 1000; // array size for UART data
const int16_t UART_SEND_MODE = 2; //0 - processing, 1 - excel
const int16_t SIGNAL_SIZE = 1024;
const int FILTER_L = 32; //Filter's window length

int16_t yBias = 1733;
// variables for correlation
int16_t sinus[4] = { 0, -1, 0, 1 };
int16_t cosinus[4] = { 1, 0, -1, 0 };
int16_t ref_seq[32] = {100, 100, 0, 0, 100, 100, 0, 0, 100, 0, 0, 0, 0, 100, 0, 100, 100, 0, 0, 100, 100, 100, 0, 100, 100, 100, 0, 100, 0, 100, 100, 100};
int u[ADC_SIZE]={ 0 }; // array for data from ADC
int16_t buff_ref_seq[SIGNAL_SIZE] = { 0 };
volatile int u_i[SIGNAL_SIZE] = { 0 };
volatile int u_q[SIGNAL_SIZE] = { 0 };
double FFT_Re[SIGNAL_SIZE] = { 0 };
double FFT_Im[SIGNAL_SIZE] = { 0 };
double ref_FFT_Re[SIGNAL_SIZE] = { 0 };
double ref_FFT_Im[SIGNAL_SIZE] = { 0 };
int result[SIGNAL_SIZE] = { 0 };
double Corr_Re[SIGNAL_SIZE] = { 0 };
double Corr_Im[SIGNAL_SIZE] = { 0 };
int vals1[FILTER_L], vals2[FILTER_L];
int au_i = 0, au_q = 0;
int16_t cy = 0, cs = 0, cm = 0; // counter
volatile uint8_t readyFlg=0, measureFlg=0; // data ready flag and flag to start listening
double dist;
int u1[UART_SIZE]={0}; // array for UART data
int ui=0; // variable for UART
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
float DigFil(float invar, float initval, uint8_t setic);
void Compute(double *vReal, double *vImag, uint16_t samples, int8_t dir);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// function for receiving data from ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
  if (hadc->Instance == ADC1) { //check if the interrupt comes from ACD1
    if (measureFlg == 1 && readyFlg == 0) { // if listening is started and data is not ready
      if (cy < ADC_SIZE) {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        u[cy] = ((int)HAL_ADC_GetValue(&hadc1)) - yBias;
               
        au_i -= vals1[cm];               
        au_q -= vals2[cm];               
        vals1[cm] = u[cy]*cosinus[cs];  
        vals2[cm] = u[cy]*sinus[cs];   
        au_i += vals1[cm];
        au_q += vals2[cm];
                
        u_i[(cy*SIGNAL_SIZE)/ADC_SIZE] = au_i/FILTER_L;
        u_q[(cy*SIGNAL_SIZE)/ADC_SIZE] = au_q/FILTER_L;
                				
        cy++; 
        cs++;
        cm++;
        if(cs>=4) cs=0;
        if(cm>=FILTER_L) cm=0;
      }
      else { // data is ready and listening is finished
        cy = 0;
        cm = 0;
        cs = 0;
        au_i = 0;
        au_q = 0;         
        for (int i = 0; i < FILTER_L; i++) {
          vals1[i]=0;
          vals2[i]=0;
        }
        measureFlg = 0;
        readyFlg = 1;
      }
    }
  }
}

// function for sending data for UART
void SendToUart(int16_t mode){
    char str00[16]={0}; // array for UART
	if(mode == 0){ // mode for Processing
    for (int16_t i = 0; i < UART_SIZE; i++){
			u1[i]=0;
			for (int16_t j = 0; j < (ADC_SIZE/UART_SIZE); j++){ // sent every 15th item
			u1[i] += u[i*(ADC_SIZE/UART_SIZE)+j]/(ADC_SIZE/UART_SIZE);
			}
		}
		for(int16_t i=0;i<UART_SIZE;i++){
			sprintf(str00,"%d ",u1[i]);
			HAL_UART_Transmit(&huart2, (uint8_t*)str00, strlen(str00), 1000);
		}
    sprintf(str00,"\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)str00, strlen(str00), 1000);
	}
	if(mode == 1){ // mode for Exel
		for(int16_t i=0;i<ADC_SIZE;i++){
			sprintf(str00,"%d %d \n",i,u[i]);
			HAL_UART_Transmit(&huart2, (uint8_t*)str00, strlen(str00), 1000);
		}
	}
	if(mode == 2){
    for(int16_t i=0;i<UART_SIZE;i++){
			if(i>=SIGNAL_SIZE) u1[i] = 0;
			else u1[i] = result[i];
      sprintf(str00,"%d ",u1[i]);
      HAL_UART_Transmit(&huart2, (uint8_t*)str00, strlen(str00), 1000);
    }
        sprintf(str00,"\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)str00, strlen(str00), 1000);
  }
	if(mode == 3){
  sprintf(str00,"%01.2f m\n",dist);
	HAL_UART_Transmit(&huart2, (uint8_t*)str00, strlen(str00), 1000);
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
	
  HAL_ADC_Start_IT(&hadc1);
  HAL_TIM_Base_Start(&htim3);
	
  GPIO_PinState currentPinState, OldPinState; // variables for the current and previous state of the pin
  cy=0;
	
  int16_t a = 10240*SIGNAL_SIZE/(ADC_SIZE*32);
  for (int16_t i = 0; i < 32; i++) {         
    for (int16_t j = 0; j < a; j++) {
      if (ref_seq[i] == 0) buff_ref_seq[i*a+j] = -100;  
      else buff_ref_seq[i*a+j] = ref_seq[i];         
    }
  }

  for(int i=0; i<SIGNAL_SIZE; i++){
    ref_FFT_Re[i] = buff_ref_seq[i];
    ref_FFT_Im[i] = 0;
  }
  Compute(ref_FFT_Re, ref_FFT_Im, SIGNAL_SIZE, 1);
  for(int i=0; i<SIGNAL_SIZE; i++){
    ref_FFT_Im[i] = -ref_FFT_Im[i];
  }

  while (1){
    currentPinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
    if (currentPinState != OldPinState && currentPinState == GPIO_PIN_SET && measureFlg == 0 && readyFlg == 0) { // catch the rising front
      measureFlg = 1; // start listening
    }
    OldPinState = currentPinState;	
		
    if(readyFlg == 1){ // if data from the ADC is collected
	  for(int i=0; i<SIGNAL_SIZE; i++){
        FFT_Re[i] = u_i[i];
        FFT_Im[i] = u_q[i];
      }
      Compute(FFT_Re, FFT_Im, SIGNAL_SIZE, 1);
      
			for(int i=0; i<SIGNAL_SIZE; i++){
       Corr_Re[i] = FFT_Re[i]*ref_FFT_Re[i] - FFT_Im[i]*ref_FFT_Im[i];
       Corr_Im[i] = FFT_Re[i]*ref_FFT_Im[i] + FFT_Im[i]*ref_FFT_Re[i]; 
      }
			Compute(Corr_Re, Corr_Im, SIGNAL_SIZE, -1);
      for(int i=0; i<SIGNAL_SIZE; i++){
        result[i] = sqrt(Corr_Re[i]*Corr_Re[i] - Corr_Im[i]*Corr_Im[i]);
      }
			
			int max=0;
			double max_idx;
			for(int i = 0; i < SIGNAL_SIZE; i++)
				{
					if(result[i] > max)
					{
						max = result[i];
						max_idx=i;
					}
        }
				
			dist = max_idx/(160000.0/(ADC_SIZE/SIGNAL_SIZE))*343.0-1.8;
			
		  SendToUart(UART_SEND_MODE);
      readyFlg=0;
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
    }
  }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK){
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void){

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK){
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void){

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 49999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK){
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK){
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK){
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK){
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK){
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK){
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void){

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 624;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK){
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK){
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK){
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void){

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
	if(UART_SEND_MODE == 0 || UART_SEND_MODE == 2) huart2.Init.BaudRate = 921600;
	if(UART_SEND_MODE == 1 || UART_SEND_MODE == 3) huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK){
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line){ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

void Swap(double *x, double *y) {
  double temp = *x;
  *x = *y;
  *y = temp;
}

void Compute(double *vReal, double *vImag, uint16_t samples, int8_t dir) {
  const int8_t FFT_FORWARD = 1;
  const int8_t FFT_REVERSE =-1;

  uint8_t power = 0;
  while (((samples >> power) & 1) != 1) power++;
  // Computes in-place complex-to-complex FFT
  // Reverse bits
  uint16_t j = 0;
  for (uint16_t i = 0; i < (samples - 1); i++) {
    if (i < j) {
      Swap(&vReal[i], &vReal[j]);
      if (dir == FFT_REVERSE)
        Swap(&vImag[i], &vImag[j]);
    }
    uint16_t k = (samples >> 1);
    while (k <= j) {
      j -= k;
      k >>= 1;
    }
    j += k;
  }
  // Compute the FFT
  double c1 = -1.0;
  double c2 = 0.0;
  uint16_t l2 = 1;
  for (uint8_t l = 0; (l < power); l++) {
    uint16_t l1 = l2;
    l2 <<= 1;
    double u1 = 1.0;
    double u2 = 0.0;
    for (j = 0; j < l1; j++) {
      for (uint16_t i = j; i < samples; i += l2) {
        uint16_t i1 = i + l1;
        double t1 = u1 * vReal[i1] - u2 * vImag[i1];
        double t2 = u1 * vImag[i1] + u2 * vReal[i1];
        vReal[i1] = vReal[i] - t1;
        vImag[i1] = vImag[i] - t2;
        vReal[i] += t1;
        vImag[i] += t2;
      }
      double z = ((u1 * c1) - (u2 * c2));
      u2 = ((u1 * c2) + (u2 * c1));
      u1 = z;
    }
    c2 = sqrt((1.0 - c1) / 2.0);
    c1 = sqrt((1.0 + c1) / 2.0);
    if (dir == FFT_FORWARD) {
      c2 = -c2;
    }
  }
  // Scaling for reverse transform
  if (dir != FFT_FORWARD) {
    for (uint16_t i = 0; i < samples; i++) {
      vReal[i] /= samples;
      vImag[i] /= samples;
    }
  }
}
